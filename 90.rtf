{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;
\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;\red157\green0\blue210;\red15\green112\blue1;
\red19\green118\blue70;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c68627\c0\c85882;\cssrgb\c0\c50196\c0;
\cssrgb\c3529\c52549\c34510;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 class\cf0 \strokec4  \cf5 \strokec5 Solution\cf0 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf2 \strokec2 public\cf0 \strokec4  \cf5 \strokec5 List\cf0 \strokec4 <\cf5 \strokec5 List\cf0 \strokec4 <\cf5 \strokec5 Integer\cf0 \strokec4 >> \cf6 \strokec6 subsetsWithDup\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4 [] \cf7 \strokec7 nums\cf0 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 List\cf0 \strokec4 <\cf5 \strokec5 List\cf0 \strokec4 <\cf5 \strokec5 Integer\cf0 \strokec4 >> \cf7 \strokec7 result\cf0 \strokec4  = \cf8 \strokec8 new\cf0 \strokec4  \cf5 \strokec5 ArrayList\cf0 \strokec4 <>();\cb1 \
\cb3         \cf7 \strokec7 Arrays\cf0 \strokec4 .\cf6 \strokec6 sort\cf0 \strokec4 (nums); \cf9 \strokec9 // Sort the array to handle duplicates\cf0 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3         \cf6 \strokec6 backtrack\cf0 \strokec4 (nums, \cf10 \strokec10 0\cf0 \strokec4 , \cf8 \strokec8 new\cf0 \strokec4  \cf5 \strokec5 ArrayList\cf0 \strokec4 <>(), result);\cb1 \
\cb3         \cb1 \
\cb3         \cf8 \strokec8 return\cf0 \strokec4  result;\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 private\cf0 \strokec4  \cf5 \strokec5 void\cf0 \strokec4  \cf6 \strokec6 backtrack\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4 [] \cf7 \strokec7 nums\cf0 \strokec4 , \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 start\cf0 \strokec4 , \cf5 \strokec5 List\cf0 \strokec4 <\cf5 \strokec5 Integer\cf0 \strokec4 > \cf7 \strokec7 current\cf0 \strokec4 , \cf5 \strokec5 List\cf0 \strokec4 <\cf5 \strokec5 List\cf0 \strokec4 <\cf5 \strokec5 Integer\cf0 \strokec4 >> \cf7 \strokec7 result\cf0 \strokec4 ) \{\cb1 \
\cb3         \cf7 \strokec7 result\cf0 \strokec4 .\cf6 \strokec6 add\cf0 \strokec4 (\cf8 \strokec8 new\cf0 \strokec4  \cf5 \strokec5 ArrayList\cf0 \strokec4 <>(current)); \cf9 \strokec9 // Add the current subset\cf0 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3         \cf8 \strokec8 for\cf0 \strokec4  (\cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 i\cf0 \strokec4  = start; i < \cf7 \strokec7 nums\cf0 \strokec4 .\cf7 \strokec7 length\cf0 \strokec4 ; i++) \{\cb1 \
\cb3             \cf9 \strokec9 // Skip duplicates to avoid duplicates in subsets\cf0 \cb1 \strokec4 \
\cb3             \cf8 \strokec8 if\cf0 \strokec4  (i > start && nums[i] == nums[i - \cf10 \strokec10 1\cf0 \strokec4 ])\cb1 \
\cb3                 \cf8 \strokec8 continue\cf0 \strokec4 ;\cb1 \
\cb3             \cb1 \
\cb3             \cf7 \strokec7 current\cf0 \strokec4 .\cf6 \strokec6 add\cf0 \strokec4 (nums[i]);\cb1 \
\cb3             \cf6 \strokec6 backtrack\cf0 \strokec4 (nums, i + \cf10 \strokec10 1\cf0 \strokec4 , current, result); \cf9 \strokec9 // Explore next elements\cf0 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 current\cf0 \strokec4 .\cf6 \strokec6 remove\cf0 \strokec4 (\cf7 \strokec7 current\cf0 \strokec4 .\cf6 \strokec6 size\cf0 \strokec4 () - \cf10 \strokec10 1\cf0 \strokec4 ); \cf9 \strokec9 // Backtrack\cf0 \cb1 \strokec4 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
}